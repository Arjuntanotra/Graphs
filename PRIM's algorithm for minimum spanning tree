#include <bits/stdc++.h> 
vector<pair<pair<int, int>, int>> calculatePrimsMST(int n, int m, vector<pair<pair<int, int>, int>> &g)
{
    //PREPARE THE ADJACENT LIST WITH WEIGHT AND ALSO THE GRAPH IS NOT DIRECTED 
    unordered_map<int , list<pair<int , int>>>adj_list;
    for(int i =0 ; i<m ; i++){
        int u = g[i].first.first;
        int v = g[i].first.second;
        int w = g[i].second;

        adj_list[u].push_back(make_pair(v, w));
        adj_list[v].push_back(make_pair(u, w));
    }


    vector<int>key(n+1);
    vector<bool>mst_traverse(n+1);
    vector<int>parent(n+1);

    for (int i = 0; i <= n; i++) {
        key[i] = INT_MAX;
        mst_traverse[i] = false;
        parent[i] = -1;
    }



    key[1] = 0;
    parent[1] = -1;


//THIS LOOP IS TRAVERSE FROM INDEX 1 TO N BECAUSE THE SIZE OF ARRAY N+1
    for (int i = 1; i <= n; i++){
        int mini = INT_MAX;
        int u;
// HERE WE FIND THE MINI AND U VALUE WITH THE HELP OF 
// NOT MST TRAVERSE AND MINI > IS GREATER THAN KEY[V]
// THEN WE CHANGE THE VALUE OF U AND MINI 
        for(int v = 1; v<=n ; v++){
            if(mst_traverse[v] == false && mini>key[v]){
                u= v;
                mini = key[v];
            }
        }

// MARK MST-TRAVERSE TRUE FOR THE MINI_NODE == U
        mst_traverse[u] = true;

// CHECK ALL THE NEIGBOUR NODE OF IT FOR U 
        for(auto neigbour : adj_list[u]){
            //IN PAIR - FIRST = NODE , SECOND = WEIGHT (ADJACENT LIST)
            int node = neigbour.first;
            int weight = neigbour.second;

// NOW IF THE MST IS FALSE AND THE WIGHT COME IS LESS THEN THE GIVEN IN KEY 
// THEN MARK PARENT OF ADJACENT NODE(NODE-NEIGHBOUR) OF U AS U 
// AND KEY[NODE] = WIGHT -- AS IT IS LESS THAN THE PRVIOIUS VALUE IF 

            if(mst_traverse[node] == false && weight<key[node]){
                key[node] = weight;
                parent[node] = u; 
            }
        }
    }



// NOW WE HAVE TO SEND THE ANSWER IN FORM OF  U - V - W
// U -- PARENT NODE , V-- ACTUAL NODE , (W -- MIN_WEIGHT == KEY)
// WE START THE LOOP FROM 2 AS THE FIRST ELEMENT HAVE PARENT == -1 

    vector<pair<pair<int , int> , int> > ans;
    for(int i = 2 ; i<=n ; i++){
        ans.push_back({{parent[i] , i} , key[i]});
    }
    return ans;
}
