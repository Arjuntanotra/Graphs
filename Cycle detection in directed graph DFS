#include <unordered_map>
#include <list>

//IN THIS WE TAKE TWO VISITED MAP:: VISITED & DFS_CALL_VISITED
//WHEN BOTH TRUE VISITED AND DFS_CALL_VISITED THEN CYCLE PRESENT


bool check_cycle(int node , unordered_map<int , list<int>>&adj , unordered_map<int , bool>&visited,
          unordered_map<int , bool>&dfs_visited){
// ENTER AND MARK THE BOTH VISITED TRUE FOR THE NODE 
            dfs_visited[node] = true;
            visited[node] = true;

// TRAVERSE THE ADJACENT LIST OF NODE 
            for(auto i : adj[node]){


// IF NOT VISITED THEN CHECK FOR IT AND IF FOUND THEN TRUE
              if(!visited[i]){
                bool ans = check_cycle(i, adj, visited, dfs_visited);
                
                if(ans){
                  return true;
                }
              }

// CASE WHEN VISITED ALSO AND ALSO THE DFS_CALL IS DONE THEN TRUE
// LOOP IS PRESENT HERE 
              else if(visited[i] && dfs_visited[i]){
                return true;
              }
            }

// AFTER RETURN FROM EACH FINAL NODE MARK ITS DFS CALL FALSE;
// DRY RUN 
            dfs_visited[node] = false;
            return false;
        }

int detectCycleInDirectedGraph(int n, vector < pair < int, int >> & edges) {
  // Write your code here.
  unordered_map<int , list<int>>adj_list;
  for(int i =0 ; i<edges.size() ; i++){
// ADJACENT LIST WITH 0 INDEX SO WE MINUS 1 EACH TIME 
    int u = edges[i].first - 1;
    int v = edges[i].second - 1;

    adj_list[u].push_back(v);
  }

  unordered_map<int , bool>visited;
  unordered_map<int , bool>dfs_visited;


  for(int i = 0 ; i<n ; i++){
    if(!visited[i]){
      bool ans = check_cycle(i , adj_list , visited , dfs_visited);

      if(ans == 1){
        return 1;
      }
    }
  }

  return 0;
}
