#include <iostream>
#include <list>
#include <unordered_map>
using namespace std;

class graph
{

public:

// IMPLEMENTED WITH THE HELP OF UNORDERED MAP 
// EACH NODE WITH LIST OF ADJLIST NODE OF IT 
    unordered_map<int, list<int>> adjacent;


// U -- STARTING VERTEX OF EDGE 
// V -- ENDING VERTEX OF EDGE
// DIRECTION -- IS DIRECTED OR NOT IF NOT DIRECTED THEN EDGE IS TO AND FROM BOTH SIDE 
    void insert_edge(int u, int v, bool direction)
    {
        adjacent[u].push_back(v);
        if (!direction)
        {
            adjacent[v].push_back(u);
        }
    }


// PRIINTING THE ADJLIST FOR EACH NODE 
    void print_adjacent()
    {
        for (auto i : adjacent)
        {
            cout << i.first << "-->  ";

            for (auto j : i.second)
            {
                cout << j <<" ";
            }
            cout << endl;
        }
    }
};
int main()
{

    graph g;
    int nodes, edges;
    cout << "Enter the number of nodes ::";
    cin >> nodes;

    cout << "Enter the number of edges in nodes :: ";
    cin >> edges;

    int u, v;
    for (int i = 0; i < edges; i++)
    {
        cin >> u >> v;
        g.insert_edge(u, v, 1);
    }

    g.print_adjacent();

    return 0;
}
