void dfs(int node , unordered_map<int , list<int>>&adj , vector<int>&visited,
                    vector<int>&component){
                        visited[node] = 1;
                        component.push_back(node);


                        for(auto i : adj[node]){
                            if(!visited[i]){
                                dfs(i, adj, visited, component);
                            }
                        }
                    }
vector<vector<int>> depthFirstSearch(int V, int E, vector<vector<int>> &edges)
{
    // Write your code here

    vector<vector<int>>ans ;

    unordered_map<int , list<int>>adj;
    vector<int>visited(V, 0);


//FIRST WE MAKE THE ADJACENT LIST FROM THE EDGES GIVEN 
    for(int i=0; i<E ; i++){
        int u = edges[i][0];
        int v = edges[i][1];

        adj[u].push_back(v);
        adj[v].push_back(u);
    }


// NOW WE MAKE THE LOOP FOR TO VISIT ALL THE NODE EVEN IF 
// THERE IS COMPONENT OF THE GRAPH 
    for(int i=0 ; i<V; i++){
        if(!visited[i]){
            // there may be more than 2 path so we make the componet path each 
            vector<int>component;
            dfs(i , adj , visited , component);
            ans.push_back(component);
        }
    }

    return ans;
}
